Question 1: Linear search and Binary search aim to find the location of a specific value within a list of values (sorted list for binary search). The next level of complexity is to find two values from a list that together satisfy some requirement. Propose an algorithm (in Python) to search for a pair of values in an unsorted array of n integers that are closest to one another. Closeness is defined as the absolute value of the difference between the two integers. Your algorithm should not first sort the list. [10 points] def closest_pair(arr): n = len(arr) pair = (0,0) min_diff = float("inf") for x in range(n): for y in range(x+1, n): diff = abs(arr[x] - arr[y]) if diff < min_diff: min_diff = diff pair = (arr[x], arr[y]) return pair Next, propose a separate algorithm (in Python) for a sorted list of integers to achieve the same goal. [10 points] def closest_pair_sorted(arr): n = len(arr) pair = (0,0) min_diff = float('inf') for x in range(n-1): diff = abs(arr[x] - arr[x+1]) if diff < min_diff: min_diff = diff pair = (arr[x], arr[x+1]) return pair Briefly discuss which algorithm is more efficient in terms of the number of comparisons performed. A