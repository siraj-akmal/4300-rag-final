}, "fields": ["Location", "Country"], "order": [["Budget", "desc"]], "groupBy": ["Country"], "aggregate": { "Location": "$concat" } } latest Algorithm to Generate SQL from JSON Queries The algorithm transforms from JSON to SQL using a top-down transformation. Usage transformJson(json, sqlSchema, isFilter, callback) The parameters are: 1. json - JSON query or filter 2. sqlSchema - JSON schema of database 3. isFilter - boolean - true if json is a filter 4. callback - function(err, result) , called upon completion The result is a structure with the following fields: { str: <SQL statement for query>, select: <select clause>, from: <from clause>, where: <where clause>, group: <group by clause>, order: <order by clause>, limit: <limit clause> } Escaping All constants appearing in the JSON query are escaped when transformed into SQL. Filters You also have the ability to mark a particular NoSQL query as a filter. This allows you to use variables in your query, which are populated on the server side from either parameters sent in with the filter, or from database data in your system. Variables take the form of: {{<variable name>}} Variables should be enclosed in quotes (e.g. '{{variable_name}}' instead of {{variable_name}} ) so that the final objet sent to the server