20, "price": 99.99 } ] } ] demodb.customers.insert_many(customers) demodb.orders.insert_many(orders) numCustomers = demodb.customers.count_documents({}) numOrders = demodb.orders.count_documents({}) print(f'There are {numCustomers} customers and {numOrders} orders') # The key (_id) attribute is automatically returned unless you explicitly say to remove it. # SELECT name, rating FROM customers data = demodb.customers.find({}, {"name":1, "rating":1}) print(dumps(data, indent=2)) # Now without the _id field. # SELECT name, rating FROM customers data = demodb.customers.find({}, {"name":1, "rating":1, "_id":0}) print(dumps(data, indent=2)) All fields EXCEPT specific ones returned # For every customer, return all fields except _id and address. data = demodb.customers.find({}, {"_id": 0, "address": 0}) print(dumps(data, indent=2)) Equivalent to SQL LIKE operator # SELECT name, rating FROM customers WHERE name LIKE 'T%' # Regular Expression Explanation: # ^ - match beginning of line # T - match literal character T (at the beginning of the line in this case) # . - match any single character except newline # * - match zero or more occurrences of the previous character (the . in this case) data = demodb.customers.find({"name": {"$regex": "^T.*"}}, {"_id": 0, "name": 1, "rating":1}) print(dumps(data, indent=2)) Sorting and limiting # SELECT name, rating FROM customers ORDER BY rating LIMIT 2 data = demodb.customers.find( { }, {"_id": 0, "name": 1, "rating":1}