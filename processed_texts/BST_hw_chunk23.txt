range(height)] def tree_traversal(node, level): if not node: return tree_levels[level].append(node.value) if node.left: tree_traversal(node.left, level - 1) if node.right: tree_traversal(node.right, level - 1) tree_traversal(root, height - 1) for level in reversed(tree_levels): print(level) if __name__ == "__main__": root = BinTreeNode(1) root.left = BinTreeNode(2) root.right = BinTreeNode(3) root.left.left = BinTreeNode(4) root.left.right = BinTreeNode(5) root.right.right