then for n records, we need n*x bytes of memory. ●Contiguously Allocated List ○ All n*x bytes are allocated as a single “chunk” of memory ●Linked List ○ Each record needs x bytes + additional space for 1 or 2 memory addresses ○ Individual records are linked together in a type of chain using memory addresses 4 Contiguous vs Linked 5 6 Records Contiguously Allocated - Array front back 6 Records Linked by memory addresses - Linked List Extra storage for a memory address Pros and Cons ●Arrays are faster for random access, but slow for inserting anywhere but the end ●Linked Lists are faster for inserting anywhere in the list, but slower for random access 6 Insert after 2nd record records: records: 5 records had to be moved to make space Insert after 2nd record Observations: - Arrays - fast for random access - slow for random insertions - Linked Lists - slow for random access - fast for random insertions 7 Binary Search ● Input: array of values in sorted order, target value ● Output: the location (index) of where target is located or some value indicating target was not found def binary_search(arr, target) left, right = 0,