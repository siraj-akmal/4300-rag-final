nil such that replacing it by z does not break the BST-property. 11 BST-Insert(x, z, k) 1: if x = nil then return “Error” 2: y ←x 3: while true do { 4: if key[y] < k 5: then z ←left[y] 6: else z ←right[y] 7: if z = nil break 8: } 9: if key[y] > k then left[y] ←z 10: else right[p[y]] ←z 12 4. The Successor and The Predecessor The successor (respectively, the predecessor) of a key k in a search tree is the smallest (respectively, the largest) key that belongs to the tree and that is strictly greater than (respectively, less than) k. The idea for ﬁnding the successor of a given node x. • If x has the right child, then the successor is the minimum in the right subtree of x. • Otherwise, the successor is the parent of the farthest node that can be reached from x by following only right branches backward. 13 An Example 4 2 3 6 5 12 9 8 11 15 19 20 7 25 23 14 Algorithm BST-Successor(x) 1: if right[x] ̸= nil then 2: { y ←right[x] 3: while left[y] ̸= nil do y ←left[y] 4: