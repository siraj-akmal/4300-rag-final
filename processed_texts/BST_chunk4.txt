then y ←right[y] 5: else y ←left[y] 6: return (“NOT FOUND”) 8 An Example search for 8 7 4 2 6 9 13 11 NIL What is the running time of search? 9 2. The Maximum and the Minimum To ﬁnd the minimum identify the leftmost node, i.e. the farthest node you can reach by following only left branches. To ﬁnd the maximum identify the rightmost node, i.e. the farthest node you can reach by following only right branches. BST-Minimum(x) 1: if x = nil then return (“Empty Tree”) 2: y ←x 3: while left[y] ̸= nil do y ←left[y] 4: return (key[y]) BST-Maximum(x) 1: if x = nil then return (“Empty Tree”) 2: y ←x 3: while right[y] ̸= nil do y ←right[y] 4: return (key[y]) 10 3. Insertion Suppose that we need to insert a node z such that k = key[z]. Using binary search we ﬁnd a nil such that replacing it by z does not break the BST-property. 11 BST-Insert(x, z, k) 1: if x = nil then return “Error” 2: y ←x 3: while true do { 4: if key[y] < k 5: then z ←left[y] 6: else z ←right[y] 7: if z = nil