record in the range has been found, the rest of the records with keys in the range can be accessed by sequential processing of the remaining records in the first node, and then continuing down the linked list of leaf nodes as far as necessary. Figure illustrates the tree. Figure 12.6.5: An example of search in a B+ tree of order four. Internal nodes must store between two and four children. Search in a tree is nearly identical to search in a regular B-tree, except that the search must always continue to the proper leaf node. Even if the search-key value is found in an internal node, this is only a placeholder and does not provide access to the actual record. Here is a pseudocode sketch of the tree search algorithm. private E findhelp(BPNode<Key,E> rt, Key k) { int currec = binaryle(rt.keys(), rt.numrecs(), k); if (rt.isLeaf()) { if ((((BPLeaf<Key,E>)rt).keys())[currec] == k) { << < > >> Example 2-3+ Tree Visualization: Delete 22 71 46 65 51 2 âˆ’3+ B+ B+ B+ 1 / 10 << < > >> Example B+ Tree Visualization: Search in a tree of degree 4 10 S 18 E 40 Q 55 F 25 40 77