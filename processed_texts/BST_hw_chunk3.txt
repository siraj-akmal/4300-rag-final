1 height = tree_height(root) tree_levels = [[] for _ in range(height)] def tree_traversal(node, level): if not node: return tree_levels[level].append(node.value) if node.left: tree_traversal(node.left, level - 1) if node.right: tree_traversal(node.right, level - 1) tree_traversal(root, height - 1) for level in reversed(tree_levels): print(level) if __name__ == "__main__": root = BinTreeNode(1) root.left = BinTreeNode(2) root.right = BinTreeNode(3) root.left.left = BinTreeNode(4) root.left.right = BinTreeNode(5) root.right.right = BinTreeNode(6) root.left.left.left = BinTreeNode(7) root.left.right.right = BinTreeNode(8) root.right.right.left = BinTreeNode(9) 1 A complete binary tree is a binary tree where every level except possibly the last level is full, meaning no additional nodes could fit on that level. root.left.left.left.left = BinTreeNode(10) print_tree(root) Question 3: Fill out your profile on Slack including a clear head shot. This will help the TAs and I, as well as you all, associate names with faces quicker. Paste a screen shot of your completed Slack profile below. [5 points]