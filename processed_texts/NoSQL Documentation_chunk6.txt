forms: 1. Constant - is the field value equal to the constant 2. Comparison with a comparison operator to a constant 3. Inclusion or exclusion in result of a sub query 4. Negation of another comparison Negation may sometimes be swapped for comparison. For example, to test if the location field is not equal to Paris, we can use negation as follows: { $not: { location : "Paris" }} Or we can also use a not-equal operator: { location: { $neq: "Paris" }} Group By Queries A group by query aggregates on fields, and then applies aggregation operators to the specified fields. For instance, to group by Country , and then concatenate the Location field, use the following example code: { "object" : "Employees", "q" : { "$or" : [ { "Budget" : { "$gt" : 20 } }, { "Location" : { "$like" : "Palo Alto" } } ] }, "fields": ["Location", "Country"], "order": [["Budget", "desc"]], "groupBy": ["Country"], "aggregate": { "Location": "$concat" } } latest Algorithm to Generate SQL from JSON Queries The algorithm transforms from JSON to SQL using a top-down transformation. Usage transformJson(json, sqlSchema, isFilter, callback) The parameters are: 1. json - JSON query or filter 2.