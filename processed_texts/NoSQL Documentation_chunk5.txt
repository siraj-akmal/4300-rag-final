table: { "object": "employees", "q" : { "deptId" : { "$in": { "object": "department", "q": { "city" : "New York" }, "fields" : ["id"] } } } } If we wanted to look at a more complex query, we could modify this a bit. Let's say we wanted to retrieve all employees whose department is located in New York, but the employee is located in Boston. To accomplish this, we use an AND expression to combine the two conditions: { "object": "employees", "q" : { "deptId": { "$in": { "object": "department", "q": { "city" : "New York" }, "fields" : ["id"] } }, "location": "Boston" } } Conditions on Fields latest Formally, a condition on a field is a key-value expression of the form: Key : ValueExpression Where the fields are defined as follows: Key - name of the field ValueExpression - An expression which has one of the following forms: 1. Constant - is the field value equal to the constant 2. Comparison with a comparison operator to a constant 3. Inclusion or exclusion in result of a sub query 4. Negation of another comparison Negation may sometimes be swapped for comparison. For example, to test if the location