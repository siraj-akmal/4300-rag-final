on the first line. The last line of output should be the root of the tree. Assume your algorithm is passed the root node of an existing binary tree whose structure is based on the following BinTreeNode class. You may use other data structures in the Python foundation library in your implementation, but you may not use an existing implementation of a Binary Tree or an existing level order traversal algorithm from any source. Construct a non-complete binary tree1 of at least 5 levels. Call your level order traversal algorithm and show that the output is correct. [20 points] class BinTreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right class BinTreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def print_tree(root): def tree_height(node): if not node: return 0 left_height = tree_height(node.left) right_height = tree_height(node.right) return max(left_height, right_height) + 1 height = tree_height(root) tree_levels = [[] for _ in range(height)] def tree_traversal(node, level): if not node: return tree_levels[level].append(node.value) if node.left: tree_traversal(node.left, level - 1) if node.right: tree_traversal(node.right, level - 1) tree_traversal(root, height - 1) for level in reversed(tree_levels): print(level) if __name__ == "__main__": root = BinTreeNode(1) root.left = BinTreeNode(2)