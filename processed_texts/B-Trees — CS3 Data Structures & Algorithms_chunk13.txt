key in the newly formed right node. As with the 2-3 tree, promotion might cause the parent to split in turn, perhaps eventually leading to splitting the root and causing the tree to gain a new level. tree insertion keeps all leaf nodes at equal depth. Figure illustrates the insertion process through several examples. Figure 12.6.6: An example of building a B+ tree of order four. Here is a a Java-like pseudocode sketch of the tree insert algorithm. private BPNode<Key,E> inserthelp(BPNode<Key,E> rt, Key k, E e) { BPNode<Key,E> retval; if (rt.isLeaf()) { // At leaf node: insert here return ((BPLeaf<Key,E>)rt).add(k, e); } // Add to internal node int currec = binaryle(rt.keys(), rt.numrecs(), k); BPNode<Key,E> temp = inserthelp( ((BPInternal<Key,E>)root).pointers(currec), k, e); if (temp != ((BPInternal<Key,E>)rt).pointers(currec)) { return ((BPInternal<Key,E>)rt). add((BPInternal<Key,E>)temp); } else{ return rt; } } B+ L L B+ L B+ B+ 1 / 42 << < > >> Example B+ Tree Visualization: Insert into a tree of degree 4 B+ 3/17/25, 9:22 AM 12.6. B-Trees â€” CS3 Data Structures & Algorithms https://opendsa-server.cs.vt.edu/ODSA/Books/CS3/html/BTree.html#id2 5/9 Here is an exercise to see if you get the basic idea of tree insertion. To delete record from the tree, first locate the leaf that contains